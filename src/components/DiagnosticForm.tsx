import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from "@/hooks/use-toast";
import { trackEvent } from "@/lib/analytics";


export const DiagnosticForm = () => {
  const [formData, setFormData] = useState({
    parentName: '',
    childAge: '',
    grade: '',
    phone: '',
    contactMethod: '',
    privacyAgreement: false
  });

  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const TOTAL_STEPS = 6;

  const { toast } = useToast();

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞
  const isStepFieldValid = (step: number) => {
    switch (step) {
      case 1: return formData.parentName.trim().length > 0;
      case 2: {
        const age = parseInt(formData.childAge);
        return formData.childAge !== '' && age >= 8 && age <= 11;
      }
      case 3: return formData.grade !== '';
      case 4: return formData.phone.length >= 18; // +7 (999) 999-99-99
      case 5: return formData.contactMethod !== '';
      case 6: return formData.privacyAgreement === true;
      default: return false;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Ñ–æ—Ä–º—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const isFormValid = () => {
    return [1, 2, 3, 4, 5, 6].every(step => isStepFieldValid(step));
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const advanceToNextStep = (fromStep: number) => {
    if (isStepFieldValid(fromStep) && currentStep === fromStep && currentStep < TOTAL_STEPS) {
      const nextStep = currentStep + 1;
      setCurrentStep(nextStep);
      
      // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
      setTimeout(() => {
        focusNextField(nextStep);
      }, 100);
    }
  };

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞
  const focusNextField = (step: number) => {
    const fieldIds = {
      1: 'parentName',
      2: 'childAge', 
      4: 'phone',
      6: 'privacy'
    };
    
    const fieldId = fieldIds[step as keyof typeof fieldIds];
    if (fieldId) {
      const element = document.getElementById(fieldId);
      if (element && !element.hasAttribute('readonly')) {
        element.focus();
      }
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const goToStep = (targetStep: number) => {
    if (targetStep <= TOTAL_STEPS && targetStep >= 1) {
      setCurrentStep(targetStep);
      setTimeout(() => {
        focusNextField(targetStep);
      }, 100);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const handleTextInput = (field: string, value: string, step: number) => {
    handleInputChange(field, value);
  };

  const handleTextBlur = (step: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
    if (currentStep === step && isStepFieldValid(step)) {
      advanceToNextStep(step);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent, step: number) => {
    if (e.key === 'Enter' && currentStep === step && isStepFieldValid(step)) {
      e.preventDefault();
      advanceToNextStep(step);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Select –∏ RadioGroup
  const handleSelectChange = (field: string, value: string, step: number) => {
    handleInputChange(field, value);
    // –î–ª—è —Å–µ–ª–µ–∫—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (currentStep === step) {
      setTimeout(() => {
        advanceToNextStep(step);
      }, 100);
    }
  };

  const handleRadioChange = (field: string, value: string, step: number) => {
    handleInputChange(field, value);
    // –î–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (currentStep === step) {
      setTimeout(() => {
        advanceToNextStep(step);
      }, 100);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const formatPhone = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    if (numbers.length <= 1) return '+7';
    if (numbers.length <= 4) return `+7 (${numbers.slice(1)}`;
    if (numbers.length <= 7) return `+7 (${numbers.slice(1, 4)}) ${numbers.slice(4)}`;
    if (numbers.length <= 9) return `+7 (${numbers.slice(1, 4)}) ${numbers.slice(4, 7)}-${numbers.slice(7)}`;
    return `+7 (${numbers.slice(1, 4)}) ${numbers.slice(4, 7)}-${numbers.slice(7, 9)}-${numbers.slice(9, 11)}`;
  };

  const handlePhoneChange = (value: string) => {
    const formatted = formatPhone(value);
    handleInputChange('phone', formatted);
  };

  const handlePhoneBlur = () => {
    if (currentStep === 4 && isStepFieldValid(4)) {
      advanceToNextStep(4);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–±–æ–∫—Å–∞
  const handleCheckboxChange = (checked: boolean | string) => {
    const booleanValue = typeof checked === 'boolean' ? checked : checked === 'true';
    handleInputChange('privacyAgreement', booleanValue);
    
    // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –æ—Ç–º–µ—á–µ–Ω –∏ –º—ã –Ω–∞ 6 —à–∞–≥–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    if (currentStep === 6 && booleanValue) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
      setTimeout(() => {
        // –§–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
      }, 200);
    }
  };

  const getProgressWidth = () => {
    return `${(currentStep / TOTAL_STEPS) * 100}%`;
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–æ –ª–∏ –ø–æ–ª–µ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º
  const shouldShowField = (step: number) => currentStep >= step;
  const isFieldCompleted = (step: number) => isStepFieldValid(step) && currentStep > step;
  const isFieldEditable = (step: number) => currentStep >= step;

const handleSubmit = async () => {
  if (isSubmitting) {
    console.log('‚è≥ –£–∂–µ –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫');
    return;
  }

  setIsSubmitting(true);
  
  // URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Apps Script
  const googleSheetURL = 'https://script.google.com/macros/s/AKfycbwk9B4gDAtuQU9Az3qI28llG48ap4P1cYKd-xs11Y1PFriLBZOCSg37nW05hd2hOb4K/exec';

  try {
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    console.log('=== –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–´ –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô ===');
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    console.log('–¢–µ–∫—É—â–∏–π —à–∞–≥:', currentStep);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    const validationResults = {
      step1: isStepFieldValid(1),
      step2: isStepFieldValid(2), 
      step3: isStepFieldValid(3),
      step4: isStepFieldValid(4),
      step5: isStepFieldValid(5),
      step6: isStepFieldValid(6)
    };
    
    console.log('–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ —à–∞–≥–∞–º:', validationResults);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    const fieldChecks = {
      parentName: formData.parentName && formData.parentName.trim().length > 0,
      childAge: formData.childAge && parseInt(formData.childAge) >= 8 && parseInt(formData.childAge) <= 11,
      grade: formData.grade && formData.grade.length > 0,
      phone: formData.phone && formData.phone.length >= 18,
      contactMethod: formData.contactMethod && formData.contactMethod.length > 0,
      privacyAgreement: formData.privacyAgreement === true
    };
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:', fieldChecks);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    const isValid = Object.values(fieldChecks).every(check => check === true);
    console.log('–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞:', isValid);
    
    if (!isValid) {
      console.log('‚ùå –§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞!');
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        variant: "destructive",
      });
      return;
    }

    console.log('‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ DiagnosticForm:', formData);
    
    // –°–æ–∑–¥–∞–µ–º FormData –æ–±—ä–µ–∫—Ç –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Google Apps Script
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:', googleSheetURL);
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(formData, null, 2));
    
    const formDataToSend = new FormData();
    formDataToSend.append('parentName', formData.parentName);
    formDataToSend.append('childAge', formData.childAge);
    formDataToSend.append('grade', formData.grade);
    formDataToSend.append('phone', formData.phone);
    formDataToSend.append('contactMethod', formData.contactMethod);
    formDataToSend.append('privacyAgreement', formData.privacyAgreement.toString());
    
    const response = await fetch(googleSheetURL, {
      method: 'POST',
      body: formDataToSend,
    });

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
    
    if (response.ok) {
      const responseData = await response.text();
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseData);

      // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      toast({
        title: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: `–°–ø–∞—Å–∏–±–æ, ${formData.parentName}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ ${formData.contactMethod === 'whatsapp' ? 'WhatsApp' : 'Telegram'} –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫.`,
        duration: 9000,
      });

      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
      if (typeof window !== 'undefined') {
        const utmParamsForAnalytics = new URLSearchParams(window.location.search).toString();
        trackEvent.ym(88888888, 'Lead_Diagnosis', { utm: utmParamsForAnalytics, ...formData });
        trackEvent.vk('diagnosis_form_submit');
      }

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        parentName: '',
        childAge: '',
        grade: '',
        phone: '',
        contactMethod: '',
        privacyAgreement: false
      });
      setCurrentStep(1);
    } else {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å no-cors –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–¢–û–õ–¨–ö–û –û–î–ù–ê –ø–æ–ø—ã—Ç–∫–∞)
    try {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å no-cors...');
      const formDataToSend = new FormData();
      formDataToSend.append('parentName', formData.parentName);
      formDataToSend.append('childAge', formData.childAge);
      formDataToSend.append('grade', formData.grade);
      formDataToSend.append('phone', formData.phone);
      formDataToSend.append('contactMethod', formData.contactMethod);
      formDataToSend.append('privacyAgreement', formData.privacyAgreement.toString());

      await fetch(googleSheetURL, {
        method: 'POST',
        mode: 'no-cors',
        body: formDataToSend,
      });
      
      console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å no-cors –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: `–°–ø–∞—Å–∏–±–æ, ${formData.parentName}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ ${formData.contactMethod === 'whatsapp' ? 'WhatsApp' : 'Telegram'} –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫.`,
        duration: 9000,
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        parentName: '',
        childAge: '',
        grade: '',
        phone: '',
        contactMethod: '',
        privacyAgreement: false
      });
      setCurrentStep(1);

    } catch (noCorsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å no-cors:', noCorsError);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.",
        variant: "destructive",
      });
    }
  } finally {
    setIsSubmitting(false);
  }
};

  return (
    <section className="py-12 sm:py-16 lg:py-20 bg-gradient-to-br from-blue-50 to-purple-50" id="diagnostic">
      <div className="container mx-auto px-4">
        <div className="text-center mb-8 sm:mb-12 lg:mb-16">
          <h2 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6 text-gray-800 leading-tight">
            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫
          </h2>
          <p className="text-base sm:text-lg lg:text-xl text-gray-600 mb-3 sm:mb-4 px-2">
            –£–∑–Ω–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –∑–∞ 30 –º–∏–Ω—É—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
          </p>
          <p className="text-sm sm:text-base lg:text-lg text-[#FF6B00] font-semibold px-2">
            üéÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
          </p>
        </div>

        <div className="max-w-md mx-auto">
          <Card className="border-0 shadow-2xl">
            <CardHeader className="bg-gradient-to-r from-[#FF6B00] to-orange-500 text-white text-center p-4 sm:p-6">
              <CardTitle className="text-lg sm:text-xl lg:text-2xl font-bold">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É</CardTitle>
              
              {/* Progress Bar */}
              <div className="mt-3 sm:mt-4">
                <div className="w-full bg-[#E0E0E0] rounded-full h-2">
                  <div 
                    className="bg-[#FFBD69] h-2 rounded-full transition-all duration-300 ease-out"
                    style={{ width: getProgressWidth() }}
                  ></div>
                </div>
                <p className="text-white/80 text-xs sm:text-sm mt-2">–®–∞–≥ {currentStep} –∏–∑ {TOTAL_STEPS}</p>
              </div>
            </CardHeader>
            <CardContent className="p-4 sm:p-6 lg:p-8">
              <div className="space-y-4 sm:space-y-6">
                {/* –®–∞–≥ 1: –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è */}
                {shouldShowField(1) && (
                  <div className={`transition-all duration-500 ${currentStep === 1 ? 'animate-fade-in' : ''}`}>
                    <Label 
                      htmlFor="parentName" 
                      className={`text-sm sm:text-base font-medium cursor-pointer ${currentStep > 1 ? 'hover:text-[#FF6B00]' : ''}`}
                      onClick={() => goToStep(1)}
                    >
                      –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è * {isFieldCompleted(1) && (
                        <span className="text-green-500 ml-2">‚úì</span>
                      )}
                    </Label>
                    <Input
                      id="parentName"
                      type="text"
                      placeholder="–í–∞—à–µ –∏–º—è"
                      value={formData.parentName}
                      onChange={(e) => handleTextInput('parentName', e.target.value, 1)}
                      onBlur={() => handleTextBlur(1)}
                      onKeyPress={(e) => handleKeyPress(e, 1)}
                      onFocus={() => goToStep(1)}
                      className="mt-2 text-sm sm:text-base lg:text-lg p-3 sm:p-4"
                      readOnly={!isFieldEditable(1)}
                      required
                    />
                  </div>
                )}

                {/* –®–∞–≥ 2: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ */}
                {shouldShowField(2) && (
                  <div className={`transition-all duration-500 ${currentStep === 2 ? 'animate-fade-in' : ''}`}>
                    <Label 
                      htmlFor="childAge" 
                      className={`text-sm sm:text-base font-medium cursor-pointer ${currentStep > 2 ? 'hover:text-[#FF6B00]' : ''}`}
                      onClick={() => goToStep(2)}
                    >
                      –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ * {isFieldCompleted(2) && (
                        <span className="text-green-500 ml-2">‚úì</span>
                      )}
                    </Label>
                    <Input
                      id="childAge"
                      type="number"
                      min="8"
                      max="11"
                      placeholder="–í–æ–∑—Ä–∞—Å—Ç (8-11 –ª–µ—Ç)"
                      value={formData.childAge}
                      onChange={(e) => handleTextInput('childAge', e.target.value, 2)}
                      onBlur={() => handleTextBlur(2)}
                      onKeyPress={(e) => handleKeyPress(e, 2)}
                      onFocus={() => goToStep(2)}
                      className="mt-2 text-sm sm:text-base lg:text-lg p-3 sm:p-4"
                      readOnly={!isFieldEditable(2)}
                      required
                    />
                  </div>
                )}

                {/* –®–∞–≥ 3: –ö–ª–∞—Å—Å */}
                {shouldShowField(3) && (
                  <div className={`transition-all duration-500 ${currentStep === 3 ? 'animate-fade-in' : ''}`}>
                    <Label 
                      className={`text-sm sm:text-base font-medium cursor-pointer ${currentStep > 3 ? 'hover:text-[#FF6B00]' : ''}`}
                      onClick={() => goToStep(3)}
                    >
                      –ö–ª–∞—Å—Å * {isFieldCompleted(3) && (
                        <span className="text-green-500 ml-2">‚úì</span>
                      )}
                    </Label>
                    <Select 
                      onValueChange={(value) => handleSelectChange('grade', value, 3)} 
                      value={formData.grade}
                      disabled={!isFieldEditable(3)}
                      required
                      onOpenChange={(open) => {
                        if (open) {
                          goToStep(3);
                        }
                      }}
                    >
                      <SelectTrigger 
                        className="mt-2 text-sm sm:text-base lg:text-lg p-3 sm:p-4"
                        onClick={() => {
                          goToStep(3);
                          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –º—ã –Ω–∞ 3 —à–∞–≥–µ
                          if (formData.grade && currentStep === 3) {
                            setTimeout(() => {
                              advanceToNextStep(3);
                            }, 500);
                          }
                        }}
                      >
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem 
                          value="2–∫–ª"
                          onClick={() => {
                            handleInputChange('grade', '2–∫–ª');
                            setTimeout(() => advanceToNextStep(3), 100);
                          }}
                        >
                          2 –∫–ª.
                        </SelectItem>
                        <SelectItem 
                          value="3–∫–ª"
                          onClick={() => {
                            handleInputChange('grade', '3–∫–ª');
                            setTimeout(() => advanceToNextStep(3), 100);
                          }}
                        >
                          3 –∫–ª.
                        </SelectItem>
                        <SelectItem 
                          value="4–∫–ª"
                          onClick={() => {
                            handleInputChange('grade', '4–∫–ª');
                            setTimeout(() => advanceToNextStep(3), 100);
                          }}
                        >
                          4 –∫–ª.
                        </SelectItem>
                        <SelectItem 
                          value="5–∫–ª"
                          onClick={() => {
                            handleInputChange('grade', '5–∫–ª');
                            setTimeout(() => advanceToNextStep(3), 100);
                          }}
                        >
                          5 –∫–ª.
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    
                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞ 3, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å */}
                    {currentStep === 3 && formData.grade && (
                      <Button
                        onClick={() => advanceToNextStep(3)}
                        className="mt-3 w-full bg-[#FF6B00] hover:bg-[#FF6B00]/90 text-white"
                        size="sm"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂
                      </Button>
                    )}
                  </div>
                )}

                {/* –®–∞–≥ 4: –¢–µ–ª–µ—Ñ–æ–Ω */}
                {shouldShowField(4) && (
                  <div className={`transition-all duration-500 ${currentStep === 4 ? 'animate-fade-in' : ''}`}>
                    <Label 
                      htmlFor="phone" 
                      className={`text-sm sm:text-base font-medium cursor-pointer ${currentStep > 4 ? 'hover:text-[#FF6B00]' : ''}`}
                      onClick={() => goToStep(4)}
                    >
                      –¢–µ–ª–µ—Ñ–æ–Ω * {isFieldCompleted(4) && (
                        <span className="text-green-500 ml-2">‚úì</span>
                      )}
                    </Label>
                    <Input
                      id="phone"
                      type="tel"
                      placeholder="+7 (999) 123-45-67"
                      value={formData.phone}
                      onChange={(e) => handlePhoneChange(e.target.value)}
                      onBlur={handlePhoneBlur}
                      onKeyPress={(e) => handleKeyPress(e, 4)}
                      onFocus={() => goToStep(4)}
                      className="mt-2 text-sm sm:text-base lg:text-lg p-3 sm:p-4"
                      readOnly={!isFieldEditable(4)}
                      required
                    />
                  </div>
                )}

                {/* –®–∞–≥ 5: –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ */}
                {shouldShowField(5) && (
                  <div className={`transition-all duration-500 ${currentStep === 5 ? 'animate-fade-in' : ''}`}>
                    <Label 
                      className={`text-sm sm:text-base font-medium cursor-pointer ${currentStep > 5 ? 'hover:text-[#FF6B00]' : ''}`}
                      onClick={() => goToStep(5)}
                    >
                      –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ * {isFieldCompleted(5) && (
                        <span className="text-green-500 ml-2">‚úì</span>
                      )}
                    </Label>
                    <RadioGroup 
                      value={formData.contactMethod} 
                      onValueChange={(value) => handleRadioChange('contactMethod', value, 5)}
                      className="mt-2"
                      disabled={!isFieldEditable(5)}
                    >
                      <div 
                        className="flex items-center space-x-2 cursor-pointer"
                        onClick={() => {
                          if (isFieldEditable(5)) {
                            goToStep(5);
                            handleRadioChange('contactMethod', 'whatsapp', 5);
                          }
                        }}
                      >
                        <RadioGroupItem value="whatsapp" id="whatsapp" disabled={!isFieldEditable(5)} />
                        <Label htmlFor="whatsapp" className="cursor-pointer">WhatsApp</Label>
                      </div>
                      <div 
                        className="flex items-center space-x-2 cursor-pointer"
                        onClick={() => {
                          if (isFieldEditable(5)) {
                            goToStep(5);
                            handleRadioChange('contactMethod', 'telegram', 5);
                          }
                        }}
                      >
                        <RadioGroupItem value="telegram" id="telegram" disabled={!isFieldEditable(5)} />
                        <Label htmlFor="telegram" className="cursor-pointer">Telegram</Label>
                      </div>
                    </RadioGroup>
                    
                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞ 5, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ */}
                    {currentStep === 5 && formData.contactMethod && (
                      <Button
                        onClick={() => advanceToNextStep(5)}
                        className="mt-3 w-full bg-[#FF6B00] hover:bg-[#FF6B00]/90 text-white"
                        size="sm"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂
                      </Button>
                    )}
                  </div>
                )}

                {/* –®–∞–≥ 6: –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö */}
                {shouldShowField(6) && (
                  <div className={`transition-all duration-500 ${currentStep === 6 ? 'animate-fade-in' : ''}`}>
                    <div className="flex items-start space-x-2">
                      <Checkbox 
                        id="privacy"
                        checked={formData.privacyAgreement}
                        onCheckedChange={(checked) => handleCheckboxChange(checked)}
                        className="mt-1"
                        disabled={!isFieldEditable(6)}
                      />
                      <Label htmlFor="privacy" className="text-sm leading-relaxed cursor-pointer">
                        –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞){' '}
                        <a 
                          href="https://docs.google.com/document/d/1vSm3Qa4KRj57nwiaGAovM57ltrvIZk46ywCoCTrnXok/edit?usp=sharing"
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-[#FF6B00] hover:underline"
                        >
                          –ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                        </a>
                        {' '}–∏ –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö *
                      </Label>
                    </div>
                  </div>
                )}
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ —à–∞–≥–∏ –ø—Ä–æ–π–¥–µ–Ω—ã */}
              {currentStep >= TOTAL_STEPS && (
                <Button
                  onClick={handleSubmit}
                  disabled={!isFormValid() || isSubmitting}
                  className="w-full mt-8 btn-primary bg-[#FF6B00] hover:bg-[#FF6B00]/90 text-white py-3 text-lg font-bold transition-all duration-500 animate-fade-in disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∏ –ø–ª–∞–Ω'}
                </Button>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </section>
  );
};
